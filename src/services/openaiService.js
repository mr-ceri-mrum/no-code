// Browser-compatible OpenAI service
// This provides a simulation layer for OpenAI API functionality in the browser

class OpenAIService {
  constructor() {
    this.connections = {};
    this.modelInfo = {
      'gpt-4o': {
        name: 'GPT-4o',
        maxTokens: 8192,
        description: 'Most capable multimodal model for text and vision tasks'
      },
      'gpt-4o-mini': {
        name: 'GPT-4o Mini',
        maxTokens: 8192,
        description: 'Smaller, more efficient version of GPT-4o'
      },
      'gpt-4-turbo': {
        name: 'GPT-4 Turbo',
        maxTokens: 4096,
        description: 'Most capable GPT-4 model optimized for speed'
      },
      'gpt-4': {
        name: 'GPT-4',
        maxTokens: 8192,
        description: 'Powerful GPT-4 model for complex tasks'
      },
      'gpt-3.5-turbo': {
        name: 'GPT-3.5 Turbo',
        maxTokens: 4096,
        description: 'Fast and efficient model for most tasks'
      }
    };
  }

  /**
   * Validate OpenAI API key
   * @param {string} apiKey - OpenAI API key
   * @param {string} orgId - Optional organization ID
   * @returns {Promise<boolean>} - True if valid
   */
  async validateKey(apiKey, orgId = '') {
    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    if (!apiKey || !apiKey.startsWith('sk-') || apiKey.length < 10) {
      throw new Error('Invalid API key');
    }
    
    // Store connection
    this.connections[apiKey] = {
      apiKey: apiKey,
      orgId: orgId,
      connected: true,
      timestamp: Date.now()
    };
    
    return true;
  }

  /**
   * List available models
   * @param {string} apiKey - OpenAI API key
   * @returns {Promise<Array>} - List of models
   */
  async listModels(apiKey) {
    await new Promise(resolve => setTimeout(resolve, 500));
    
    if (!this.connections[apiKey]) {
      throw new Error('Not connected');
    }
    
    return Object.entries(this.modelInfo).map(([id, info]) => ({
      id,
      ...info
    }));
  }

  /**
   * Simulate text generation with OpenAI
   * @param {string} apiKey - OpenAI API key
   * @param {string} model - Model ID
   * @param {string} prompt - Text prompt
   * @param {object} options - Generation options
   * @returns {Promise<object>} - Generated text and metadata
   */
  async generateText(apiKey, model, prompt, options = {}) {
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    if (!this.connections[apiKey]) {
      throw new Error('Not connected');
    }
    
    if (!this.modelInfo[model]) {
      throw new Error('Invalid model');
    }
    
    // Simulate text generation
    const responses = {
      'Hello': 'Hello! How can I assist you today?',
      'What is AI?': 'Artificial Intelligence (AI) refers to systems or machines that mimic human intelligence to perform tasks and can iteratively improve themselves based on the information they collect.',
      'Tell me a joke': 'Why don\'t scientists trust atoms? Because they make up everything!'
    };
    
    // Get a default response or use one of the preset ones
    let responseText = 'This is a simulated response from the AI. In a real implementation, this would be generated by the OpenAI API.';
    
    for (const [key, value] of Object.entries(responses)) {
      if (prompt.includes(key)) {
        responseText = value;
        break;
      }
    }
    
    return {
      id: `chatcmpl-${Date.now().toString(36)}`,
      object: 'chat.completion',
      created: Math.floor(Date.now() / 1000),
      model: model,
      choices: [
        {
          index: 0,
          message: {
            role: 'assistant',
            content: responseText
          },
          finish_reason: 'stop'
        }
      ],
      usage: {
        prompt_tokens: prompt.length,
        completion_tokens: responseText.length,
        total_tokens: prompt.length + responseText.length
      }
    };
  }
  
  /**
   * Get connection info
   * @param {string} apiKey - API key
   * @returns {object|null} - Connection info or null if not connected
   */
  getConnectionInfo(apiKey) {
    return this.connections[apiKey] || null;
  }
}

// Create singleton instance
const openaiService = new OpenAIService();

export default openaiService;
